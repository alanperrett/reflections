Refelctions on lesson 3

When would you want to use a remote repository rather than keeping all your work local?
This makes a lot of sense when working with multiple collaborators for example. Even if they don't want to add code, they can do 
code reviews, make suggestions and so on.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You might be working on something in you local repository that you want to roll back at some point, if ther are multiple 
commits from other users, this roll back woud lbe difficult. Equally you migth want a stable base to put trick changes into.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork describes cloning a repo on github to another location on gihub. Clone is making a copy either of a remote repo or of a 
local one to your own machine. A branch means making a new version of the code line for different changes to be made to those on 
the main or master branch for example.

What is the benefit of having a copy of the last known state of the remote stored locally?
For off line working this is useful, but evan with internet access it makes sense to have a local copy to 
check merges and commits without interacting with the remote repo.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
It might be possible to use file sharing sites like google docs to all work on the same file. Alternatively
files could be shared. However keeping track of changes and maintaining a known working version woudl be 
very difficult. 

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?
You might want to make chenges in a seperate branch rather than directly in master is much the same advantage
as making changes to a seperate branch using only local repos - the ability to try things out, being able to
mae big changes that are multiple commits where each one may not be working until the final one, but without 
breaking master. If other people are using master then you won't brrak it. Of course this means that you need
to keep up to date and the whole -pull changes - merge master to local branch - push the branch to remote -
merge to master - is very complicated.

